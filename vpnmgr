#!/usr/bin/env bash
#
# Name:         vpnmgr
# Description:  Create and delete OpenVPN client configurations
# OS:           CentOS 7
# Author:       <Dmitry V.> dmitry.vlasov@fastmail.com
# Version:      0.1

declare -rA app=(
    ["name"]="vpnmgr"
    ["description"]="Create and delete OpenVPN client configurations"
    ["version"]="0.1"
    ["github"]="https://raw.githubusercontent.com/Atari365"
)

function usage() {
    echo "Usage: vpnmgr command [options]
${app['description']}

Commands:
    create       Create the client configuration
    delete       Delete the client configuration
    help         Show this message
    status       Show existing configurations and their status
    update       Update vpnmgr from github repo
    version      Show the version

Options:
    vpnmgr (create|delete) name
        name     Client configuration name

    vpnmgr status [name]
        name     Client configuration name (if empty, show a list of configurations)"
}

function version() {
    echo "${app['name']} ${app['version']}"
}

function update() {
    wget -q "${app['github']}/vpnmgr/master/vpnmgr" -O ./vpnmgr && echo "Update complete" || echo "Update failed"
    chmod +x ./vpnmgr
}

function root_check() {
    if [[ $EUID -ne 0 ]]; then
       echo "This script must be run as root"
       exit 1
    fi
}

function openvpn_check() {
    if ! [[ -f "/etc/openvpn/server/check" ]]; then
        echo "OpenVPN is not deployed. Use the deploy_vpnmgr.sh"
        exit 1
    fi
}

function printTable() {
    local input=""
    while [[ $# -gt 0 ]]; do
        if [[ "${2}" == "" || "${1}" == *"\n" ]]; then
            input+="${1}"
        else
            input+="${1},"
        fi
        shift 1
    done

    local -r delimiter=","
    local -r input=${input}
    local -r data="$(removeEmptyLines "$input")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]; then
        local -r numberOfLines="$(wc -l <<< "${data}")"
        if [[ "${numberOfLines}" -gt '0' ]]; then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1)); do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"
                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                    if [[ "${i}" -eq '1' ]]; then
                        table="${table}$(printf '%s+' "$(repeatString '+#' "${numberOfColumns}")")"
                    fi

                table="${table}\n"
                local j=1
                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1)); do
                    if [[ "$j" == "1" ]]; then
                        table="${table}$(printf '| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                    else
                        table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                    fi
                done

                table="${table}#|\n"
                    if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]; then
                        table="${table}$(printf '%s+' "$(repeatString '+#' "${numberOfColumns}")")"
                    fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]; then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines() {
    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString() {
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]; then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString() {
    local -r string="${1}"
    if [[ "$(trimString "${string}")" = '' ]]; then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}

function trimString() {
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

function bytes_convert() {
    local bytes=${1}
    if [[ "${bytes}" -ge "1099511627776" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024/1024/1024 }") TB"
    elif [[ "${bytes}" -ge "1073741824" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024/1024 }") GB"
    elif [[ "${bytes}" -ge "1048576" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024 }") MB"
    elif [[ "${bytes}" -ge "1024" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024 }") KB"
    else
        bytes="$(awk "BEGIN { printf \"%3.0f\", ${bytes} }") B"
    fi
    echo ${bytes}
}

function create() {
    client_config="/etc/openvpn/clients/$name.ovpn"
    ca_crt="/etc/openvpn/ca/pki/ca.crt"
    client_key="/etc/openvpn/pki/pki/private/$name.key"
    client_crt="/etc/openvpn/ca/pki/issued/$name.crt"
    ta="/etc/openvpn/server/ta.key"

    if [[ -f ${client_config} ]]; then
        echo "Client configuration already exist"
        exit 1
    fi

    cd /etc/openvpn/pki
    ./easyrsa gen-req ${name}
    if ! [[ -f "/etc/openvpn/pki/pki/reqs/$name.req" ]]; then
        echo "Unexpected error creating request by PKI"
        exit 1
    fi

    cd /etc/openvpn/ca
    ./easyrsa import-req /etc/openvpn/pki/pki/reqs/${name}.req ${name}
    if ! [[ -f "/etc/openvpn/ca/pki/reqs/$name.req" ]]; then
        echo "Unexpected error importing request to the CA"
        exit 1
    fi
    ./easyrsa sign-req client ${name}
    if ! [[ -f ${client_crt} ]]; then
        echo "Unexpected error signing certificate by CA"
        exit 1
    fi

    cat /etc/openvpn/client/base_configuration.conf \
        <(echo -e '<ca>') \
        ${ca_crt} \
        <(echo -e '</ca>\n<cert>') \
        ${client_crt} \
        <(echo -e '</cert>\n<key>') \
        ${client_key} \
        <(echo -e '</key>\n<tls-crypt>') \
        ${ta} \
        <(echo -e '</tls-crypt>') \
        > ${client_config}

    if ! [[ -f ${client_config} ]]; then
        echo "Unexpected error creating client configuration"
        exit 1
    fi
    chown openvpn:openvpn ${client_config}
    echo "$name,Down" >> /etc/openvpn/client/clients.db
    echo "Config $name created in /etc/openvpn/clients"
}

function delete() {
    if [[ -f "/etc/openvpn/ca/pki/reqs/$name.req" ]] || [[ -f "/etc/openvpn/ca/pki/issued/$name.crt" ]]; then
        cd /etc/openvpn/ca
        ./easyrsa revoke ${name}
        ./easyrsa gen-crl
        systemctl restart openvpn@server
    fi

    if ! [[ -f "/etc/openvpn/clients/$name.ovpn" ]]; then
        echo "Client configuration does not exist"
        exit 1
    fi
    rm /etc/openvpn/clients/${name}.ovpn
    cp /etc/openvpn/ca/pki/crl.pem /etc/openvpn/server/
    sed -i "/^$name,/d" /etc/openvpn/client/ipp.txt
    sed -i "/^$name,/d" /etc/openvpn/client/clients.db
    echo "Configuration $name has been deleted"
}

function status() {
    client_db_path="/etc/openvpn/client/clients.db"
    openvpn_status_path="/var/log/openvpn/openvpn-status.log"

    if [[ "$mode" == "detailed" ]]; then
        local -A client=(
            ["Name"]="-"
            ["Virtual IPv4 Address"]="-"
            ["Virtual IPv6 Address"]="-"
            ["Real Address"]="-"
            ["Received"]="-"
            ["Sent"]="-"
            ["Connected Since"]="-"
            ["Last Ref"]="-"
            ["Status Updated"]="-"
            ["Status"]="-"
        )

        client_db=$(cat ${client_db_path} | grep "^$name,")
        if [[ "$client_db" == "" ]]; then
            echo "Configuration not found"
            exit 1;
        fi

        local -a client_info
        IFS=',' read -ra client_info <<< ${client_db}
        client["Name"]=${client_info[0]}
        client["Status"]=${client_info[1]}

        local -a updated=($(cat ${openvpn_status_path} | grep "^Updated," | tr ',' '\n'))
        client['Status Updated']=${updated[1]}
        for index in 2 3 4 5 ; do
            client['Status Updated']+=" ${updated[$index]}"
        done

        local -a client_list=($(cat ${openvpn_status_path} | grep "^${client['Name']}," | tr ',' '\n'))
        local -a routing_table=($(cat ${openvpn_status_path} | grep ",${client['Name']}," | tr ',' '\n'))
        if [[ ${#client_list[@]} -ne 0 ]]; then
            if [[ ${routing_table[8]} != "" ]]; then
                client['Virtual IPv4 Address']=${routing_table[8]}
                client['Virtual IPv6 Address']=${routing_table[0]}
            else
                client['Virtual IPv4 Address']=${routing_table[0]}
            fi

            client['Real Address']=${client_list[1]}
            client['Received']=$(bytes_convert ${client_list[2]})
            client['Sent']=$(bytes_convert ${client_list[3]})

            client['Connected Since']=${client_list[4]}
            for index in 5 6 7 8 ; do
                client['Connected Since']+=" ${client_list[$index]}"
            done

            client['Last Ref']="${routing_table[3]}"
            for index in 4 5 6 7 ; do
                client['Last Ref']+=" ${routing_table[$index]}"
            done
        fi

        printTable "Name"                   "${client['Name']}\n" \
                   "Virtual IPv4 Address"   "${client['Virtual IPv4 Address']}\n" \
                   "Virtual IPv6 Address"   "${client['Virtual IPv6 Address']}\n"\
                   "Real Address"           "${client['Real Address']}\n" \
                   "Received"               "${client['Received']}\n" \
                   "Sent"                   "${client['Sent']}\n" \
                   "Connected Since"        "${client['Connected Since']}\n" \
                   "Last Ref"               "${client['Last Ref']}\n" \
                   "Status Updated"         "${client['Status Updated']}\n" \
                   "Status"                 "${client['Status']}"
    elif [[ "$mode" == "list" ]]; then
        local -a client_name
        local -a virtual_address
        local -a real_address
        local -a state

        local client_db=$(cat ${client_db_path})
        local openvpn_status=$(cat ${openvpn_status_path})
        local updated
        if ! [[ "$openvpn_status" == "" ]];  then
            IFS=',' read -ra updated <<< $(cat ${openvpn_status_path} | grep "^Updated,")
            echo "${updated[0]}: ${updated[1]}"
        fi
        if [[ "$client_db" == "" ]]; then
            printTable "2" "Name" "Virtual Address" "Real Address" "Status\n" \
                           "-" "-" "-" "-"
            exit 1
        fi

        for line in ${client_db}; do
            local -a client_info
            IFS=',' read -ra client_info <<< ${line}
            client_name+=("${client_info[0]}")
            state+=("${client_info[1]}")

            local -a routing_table_entry=($(cat ${openvpn_status_path} | grep ",${client_info[0]},"))
            if [[ ${#routing_table_entry[@]} -eq 0 ]]; then
                virtual_address+=("-")
                real_address+=("-")
                continue
            fi

            if ! [[ "${routing_table_entry[5]}" == "" ]]; then
                local routing_table=${routing_table_entry[5]}
            else
                local routing_table=${routing_table_entry[0]}
            fi

            client_info=($(echo ${routing_table} | tr ',' '\n'))
            virtual_address+=("${client_info[0]}")
            real_address+=("${client_info[2]}")
        done

        printTable "Name" "Virtual Address" "Real Address" "Status\n" \
                   $(
                       for index in "${!client_name[@]}" ; do
                           echo "${client_name[$index]} ${virtual_address[$index]} ${real_address[$index]} ${state[$index]}\n"
                       done
                   )
    fi
}

openvpn_check

if [[ "$1" == "" ]]; then usage; fi

for line in $@; do
    if [[ "$line" == "--help" ]] || [[ "$line" == "-h" ]] ; then
            usage
            exit 1
    elif [[ "$line" == "--version" ]] || [[ "$line" == "-v" ]] ; then
        version
        exit 1
    fi
done

while [[ $# -gt 0 ]]; do
    case "$1" in
        h|help|--help)
            usage
            exit 1
            ;;
        v|version|-v|--version)
            version
            exit 1
            ;;
        u|update)
            root_check
            update
            exit 1
            ;;
        c|create)
            root_check
            shift 1
            if [[ "$1" == "" ]]; then
                echo -e "Error: missing name of configuration"
                usage
                exit 1
            fi
            name=$1
            create
            shift 1
            ;;
        d|delete)
            root_check
            shift 1
            if [[ "$1" == "" ]]; then
                echo -e "Error: missing name of configuration"
                usage
                exit 1
            fi
            name=$1
            delete
            shift 1
            ;;
        s|status)
            root_check
            if [[ "$2" == "" ]]; then
                mode='list'
            else
                mode='detailed'
                name=$2
                shift 1
            fi
            status
            shift
            ;;
        *)
            echo -e "Syntax error. See help"
            exit 1
            ;;
    esac
done