#!/usr/bin/env bash
#
# Name:         vpnmgr
# Description:  Create and delete OpenVPN client configurations
# OS:           CentOS 7
# Author:       <Dmitry V.> dmitry.vlasov@fastmail.com
# Version:      0.2
# TODO:         Сделать удобную работу с несколькими серверами OpenVPN (развертывание, удаление, управление конфигурациями сервера, установка сервера по умолчанию)
# TODO:         Сдеать нормальный консольный интерфейс (Refactoring)

declare -rA app=(
    ["name"]="vpnmgr"
    ["description"]="Create and delete OpenVPN client configurations"
    ["version"]="0.2"
    ["github"]="https://github.com/Atari365/vpnmgr"
    ["dir"]="/etc/openvpn/vpnmgr"
)

declare server_name="server"

function usage() {
    echo "Usage: vpnmgr command [options]
${app['description']}

Commands:
    create       Create the client configuration
    delete       Delete the client configuration
    help         Show this message
    status       Show existing configurations and their status
    update       Update vpnmgr from github repo
    version      Show the version

Options:
    vpnmgr (create|delete) name
        name     Client configuration name

    vpnmgr status [name]
        name     Client configuration name (if empty, show a list of configurations)"
}

function version() {
    echo "${app['name']} ${app['version']}"
}

function update() {
    wget -q "https://raw.githubusercontent.com/Atari365/vpnmgr/master/vpnmgr" -O /usr/bin/vpnmgr && echo "Update complete" || echo "Update failed"
    chmod +x /usr/bin/vpnmgr
}

function root_check() {
    if [[ $EUID -ne 0 ]]; then
       echo "This script must be run as root"
       exit 1
    fi
}

function openvpn_check() {
    if ! [[ -f "${app['dir']}/${server_name}/server/check" ]]; then
        echo "OpenVPN is not deployed. Use the deploy_vpnmgr.sh"
        exit 1
    fi
}

function printTable() {
    local input=""
    while [[ $# -gt 0 ]]; do
        if [[ "${2}" == "" || "${1}" == *"\n" ]]; then
            input+="${1}"
        else
            input+="${1},"
        fi
        shift 1
    done

    local -r delimiter=","
    local -r input=${input}
    local -r data="$(removeEmptyLines "$input")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]; then
        local -r numberOfLines="$(wc -l <<< "${data}")"
        if [[ "${numberOfLines}" -gt '0' ]]; then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1)); do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"
                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                    if [[ "${i}" -eq '1' ]]; then
                        table="${table}$(printf '%s+' "$(repeatString '+#' "${numberOfColumns}")")"
                    fi

                table="${table}\n"
                local j=1
                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1)); do
                    if [[ "$j" == "1" ]]; then
                        table="${table}$(printf '| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                    else
                        table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                    fi
                done

                table="${table}#|\n"
                    if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]; then
                        table="${table}$(printf '%s+' "$(repeatString '+#' "${numberOfColumns}")")"
                    fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]; then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines() {
    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString() {
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]; then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString() {
    local -r string="${1}"
    if [[ "$(trimString "${string}")" = '' ]]; then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}

function trimString() {
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

function bytes_convert() {
    local bytes=${1}
    if [[ "${bytes}" -ge "1099511627776" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024/1024/1024 }") TB"
    elif [[ "${bytes}" -ge "1073741824" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024/1024 }") GB"
    elif [[ "${bytes}" -ge "1048576" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024/1024 }") MB"
    elif [[ "${bytes}" -ge "1024" ]]; then
        bytes="$(awk "BEGIN { printf \"%3.2f\", ${bytes}/1024 }") KB"
    else
        bytes="$(awk "BEGIN { printf \"%3.0f\", ${bytes} }") B"
    fi
    echo ${bytes}
}

function create() {
    local -r name=$1

    client_config="${app['dir']}/${server_name}/client_configs/$name.ovpn"
    ca_crt="${app['dir']}/${server_name}/ca/pki/ca.crt"
    client_key="${app['dir']}/${server_name}/pki/pki/private/$name.key"
    client_crt="${app['dir']}/${server_name}/ca/pki/issued/$name.crt"
    ta="${app['dir']}/${server_name}/server/ta.key"
    pki_path="${app['dir']}/${server_name}/pki"
    ca_path="${app['dir']}/${server_name}/ca"
    base_config="${app['dir']}/${server_name}/server/base_configuration.conf"
    clients_db="${app['dir']}/${server_name}/server/clients.db"

    if [[ -f ${client_config} ]]; then
        echo "Client configuration already exist"
        exit 1
    fi

    cd ${pki_path}
   ./easyrsa gen-req ${name} batch
    unset gen_pki_input
    if ! [[ -f "${pki_path}/pki/reqs/$name.req" ]]; then
        echo "Unexpected error creating request by PKI"
        exit 1
    fi

    cd ${ca_path}
    ./easyrsa import-req "${pki_path}/pki/reqs/${name}.req" ${name} > /dev/null 2>&1
    if ! [[ -f "${ca_path}/pki/reqs/$name.req" ]]; then
        echo "Unexpected error importing request to the CA"
        exit 1
    fi

    echo "yes" | ./easyrsa sign-req client ${name} > /dev/null 2>&1
    if ! [[ -f ${client_crt} ]]; then
        echo "Unexpected error signing certificate by CA"
        exit 1
    fi

    cat ${base_config} \
        <(echo -e '<ca>') \
        ${ca_crt} \
        <(echo -e '</ca>\n<cert>') \
        ${client_crt} \
        <(echo -e '</cert>\n<key>') \
        ${client_key} \
        <(echo -e '</key>\n<tls-crypt>') \
        ${ta} \
        <(echo -e '</tls-crypt>') \
        > ${client_config}

    if ! [[ -f ${client_config} ]]; then
        echo "Unexpected error creating client configuration"
        exit 1
    fi
    chown $(id -un 1000):$(id -un 1000) ${client_config}
    echo "$name,Down" >> ${clients_db}
    echo "Config $name created in ${client_config}"
}

function delete() {
    local -r name=$1

    ca_path="${app['dir']}/${server_name}/ca"
    req_path="${app['dir']}/${server_name}/ca/pki/reqs/$name.req"
    crt_path="${app['dir']}/${server_name}/ca/pki/issued/$name.crt"
    client_config="${app['dir']}/${server_name}/client_configs/$name.ovpn"

    local input
    echo "Please confirm you wish to revoke the certificate."
    read -p "Type the word 'yes' to continue, or any other input to abort: " input
    echo ""

    if [[ ${input} != "yes" ]]; then
        exit 1
    fi

    if [[ -f ${req_path} ]] || [[ -f ${crt_path} ]]; then
        cd ${ca_path}
        echo ${input} | ./easyrsa revoke ${name} > /dev/null 2>&1
        ./easyrsa gen-crl > /dev/null 2>&1
        systemctl restart openvpn@${server_name}_vpnmgr > /dev/null 2>&1
    fi

    if ! [[ -f ${client_config} ]]; then
        echo "Client configuration does not exist"
        exit 1
    fi
    rm ${client_config}
    cp ${app['dir']}/${server_name}/ca/pki/crl.pem ${app['dir']}/${server_name}/server
    sed -i "/^$name,/d" ${app['dir']}/${server_name}/server/ipp.txt
    sed -i "/^$name,/d" ${app['dir']}/${server_name}/server/clients.db
    echo "Configuration $name has been deleted"
}

function status_list() {
    client_db_path="${app['dir']}/${server_name}/server/clients.db"
    openvpn_status_path="${app['dir']}/${server_name}/server/openvpn-status.log"

    local -a client_name
    local -a virtual_address
    local -a real_address
    local -a state

    local client_db=$(cat ${client_db_path})
    local openvpn_status=$(cat ${openvpn_status_path})
    local -a updated
    if ! [[ "$openvpn_status" == "" ]];  then
        IFS=',' read -ra updated <<< $(cat ${openvpn_status_path} | grep "^Updated,")
        echo "${updated[0]}: ${updated[1]}"
    fi
    if [[ "$client_db" == "" ]]; then
        printTable "Name" "Virtual Address" "Real Address" "Status\n" \
                   "-" "-" "-" "-"
        exit 1
    fi

    for line in ${client_db}; do
        local -a client_info
        IFS=',' read -ra client_info <<< ${line}
        client_name+=("${client_info[0]}")
        state+=("${client_info[1]}")

        local -a routing_table_entry=($(cat ${openvpn_status_path} | grep ",${client_info[0]},"))
        if [[ ${#routing_table_entry[@]} -eq 0 ]]; then
            virtual_address+=("-")
            real_address+=("-")
            continue
        fi

        local routing_table
        if ! [[ "${routing_table_entry[5]}" == "" ]]; then
            local routing_table=${routing_table_entry[5]}
        else
            routing_table=${routing_table_entry[0]}
        fi

        client_info=($(echo ${routing_table} | tr ',' '\n'))

        real_address+=("${client_info[2]}")

        if ! [[ ${client_info[0]} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            local -a routing_table_at_swap_string=($(echo ${routing_table_entry[0]} | tr ',' '\n'))
            virtual_address+=("${routing_table_at_swap_string[0]}")
        else
            virtual_address+=("${client_info[0]}")
        fi
    done

    printTable "Name" "Virtual Address" "Real Address" "Status\n" \
               $(
                   for index in "${!client_name[@]}" ; do
                       echo "${client_name[$index]} ${virtual_address[$index]} ${real_address[$index]} ${state[$index]}\n"
                   done
               )
}

function detailed_status() {
    local -r name=$1
    client_db_path="${app['dir']}/${server_name}/server/clients.db"
    openvpn_status_path="${app['dir']}/${server_name}/server/openvpn-status.log"

    local -A client=(
        ["Name"]="-"
        ["Virtual IPv4 Address"]="-"
        ["Virtual IPv6 Address"]="-"
        ["Real Address"]="-"
        ["Received"]="-"
        ["Sent"]="-"
        ["Connected Since"]="-"
        ["Last Ref"]="-"
        ["Status Updated"]="-"
        ["Status"]="-"
    )

    client_db=$(cat ${client_db_path} | grep "^$name,")
    if [[ "$client_db" == "" ]]; then
        echo "Configuration not found"
        exit 1;
    fi

    local -a client_info
    IFS=',' read -ra client_info <<< ${client_db}
    client["Name"]=${client_info[0]}
    client["Status"]=${client_info[1]}

    local -a updated=($(cat ${openvpn_status_path} | grep "^Updated," | tr ',' '\n'))
    client['Status Updated']=${updated[1]}
    for index in 2 3 4 5 ; do
        client['Status Updated']+=" ${updated[$index]}"
    done

    local -a client_list=($(cat ${openvpn_status_path} | grep "^${client['Name']}," | tr ',' '\n'))
    local -a routing_table=($(cat ${openvpn_status_path} | grep ",${client['Name']}," | tr ',' '\n'))
    if [[ ${#client_list[@]} -ne 0 ]]; then
        if [[ ${routing_table[8]} != "" ]]; then
            client['Virtual IPv4 Address']=${routing_table[8]}
            client['Virtual IPv6 Address']=${routing_table[0]}
        else
            client['Virtual IPv4 Address']=${routing_table[0]}
        fi

        client['Real Address']=${client_list[1]}
        client['Received']=$(bytes_convert ${client_list[2]})
        client['Sent']=$(bytes_convert ${client_list[3]})

        client['Connected Since']=${client_list[4]}
        for index in 5 6 7 8 ; do
            client['Connected Since']+=" ${client_list[$index]}"
        done

        client['Last Ref']="${routing_table[3]}"
        for index in 4 5 6 7 ; do
            client['Last Ref']+=" ${routing_table[$index]}"
        done
    fi

    if ! [[ ${client['Virtual IPv4 Address']} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        local temp=${client['Virtual IPv4 Address']}
        client['Virtual IPv4 Address']=${client['Virtual IPv6 Address']}
        client['Virtual IPv6 Address']=${temp}
    fi

    printTable "Name"                   "${client['Name']}\n" \
               "Virtual IPv4 Address"   "${client['Virtual IPv4 Address']}\n" \
               "Virtual IPv6 Address"   "${client['Virtual IPv6 Address']}\n"\
               "Real Address"           "${client['Real Address']}\n" \
               "Received"               "${client['Received']}\n" \
               "Sent"                   "${client['Sent']}\n" \
               "Connected Since"        "${client['Connected Since']}\n" \
               "Last Ref"               "${client['Last Ref']}\n" \
               "Status Updated"         "${client['Status Updated']}\n" \
               "Status"                 "${client['Status']}"
}

openvpn_check

if [[ "$1" == "" ]]; then usage; fi

for line in $@; do
    if [[ "$line" == "--help" ]] || [[ "$line" == "-h" ]] ; then
        usage
        exit 1
    elif [[ "$line" == "--version" ]] || [[ "$line" == "-v" ]] ; then
        version
        exit 1
    fi
done

while [[ $# -gt 0 ]]; do
    case "$1" in
        h|help)
            usage
            exit 1
            ;;
        v|version)
            version
            exit 1
            ;;
        u|update)
            root_check
            update
            exit 1
            ;;
        c|create)
            root_check
            shift 1
            if [[ "$1" == "" ]]; then
                echo -e "Error: missing name of configuration"
                usage
                exit 1
            fi
            create $1
            shift 1
            ;;
        d|delete)
            root_check
            shift 1
            if [[ "$1" == "" ]]; then
                echo -e "Error: missing name of configuration"
                usage
                exit 1
            fi
            delete $1
            shift 1
            ;;
        s|status)
            root_check
            if [[ "$2" == "" ]]; then
                status_list
                shift 1
            else
                detailed_status $2
                shift 2
            fi
            ;;
        *)
            echo -e "Syntax error. See help"
            exit 1
            ;;
    esac
done